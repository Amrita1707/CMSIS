
3_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000284  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000440  08000440  00010448  2**0
                  CONTENTS
  4 .ARM          00000000  08000440  08000440  00010448  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000440  08000448  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010448  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000454  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000135  00000000  00000000  000108cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000058  00000000  00000000  00010a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180bf  00000000  00000000  00010ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005d3  00000000  00000000  00028b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087b81  00000000  00000000  00029162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b0ce3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000110  00000000  00000000  000b0d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000414 	.word	0x08000414

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000414 	.word	0x08000414

080001e8 <main>:

// Function to provide delay
void delay(void);

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
    uart2_tx_init();
 80001ec:	f000 f816 	bl	800021c <uart2_tx_init>
    uart();
 80001f0:	f000 f83e 	bl	8000270 <uart>

    while(1)
    {
    	// Transmit character 'A'
        data_write('A');
 80001f4:	2041      	movs	r0, #65	; 0x41
 80001f6:	f000 f86f 	bl	80002d8 <data_write>
        data_write('\r'); // Transmit carriage return
 80001fa:	200d      	movs	r0, #13
 80001fc:	f000 f86c 	bl	80002d8 <data_write>
        data_write('\n'); // Transmit newline
 8000200:	200a      	movs	r0, #10
 8000202:	f000 f869 	bl	80002d8 <data_write>
        delay();
 8000206:	f000 f89f 	bl	8000348 <delay>
        // Transmit string
        string_write("UART communication");
 800020a:	4803      	ldr	r0, [pc, #12]	; (8000218 <main+0x30>)
 800020c:	f000 f87c 	bl	8000308 <string_write>
        delay();
 8000210:	f000 f89a 	bl	8000348 <delay>
        data_write('A');
 8000214:	e7ee      	b.n	80001f4 <main+0xc>
 8000216:	bf00      	nop
 8000218:	0800042c 	.word	0x0800042c

0800021c <uart2_tx_init>:
    }
}

// Function to initialize UART2 TX pin
void uart2_tx_init(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
    // Enable clock access to GPIOA
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <uart2_tx_init+0x4c>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000224:	4a10      	ldr	r2, [pc, #64]	; (8000268 <uart2_tx_init+0x4c>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	; 0x30

    // Set PA2 mode to alternate function mode
    GPIOA->MODER |= GPIO_MODER_MODE2_1;
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <uart2_tx_init+0x50>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0e      	ldr	r2, [pc, #56]	; (800026c <uart2_tx_init+0x50>)
 8000232:	f043 0320 	orr.w	r3, r3, #32
 8000236:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~GPIO_MODER_MODE2_0;
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <uart2_tx_init+0x50>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0b      	ldr	r2, [pc, #44]	; (800026c <uart2_tx_init+0x50>)
 800023e:	f023 0310 	bic.w	r3, r3, #16
 8000242:	6013      	str	r3, [r2, #0]

    // Set PA2 alternate function type to USART_TX
    GPIOA->AFR[0] |= GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_0;
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <uart2_tx_init+0x50>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a08      	ldr	r2, [pc, #32]	; (800026c <uart2_tx_init+0x50>)
 800024a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800024e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL2_3;
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <uart2_tx_init+0x50>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <uart2_tx_init+0x50>)
 8000256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800025a:	6213      	str	r3, [r2, #32]
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40023800 	.word	0x40023800
 800026c:	40020000 	.word	0x40020000

08000270 <uart>:

// Function to configure UART2 module
void uart(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
    // Enable clock access to USART2
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000274:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <uart+0x60>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000278:	4a15      	ldr	r2, [pc, #84]	; (80002d0 <uart+0x60>)
 800027a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027e:	6413      	str	r3, [r2, #64]	; 0x40

    // Set UART baud rate to 9600
    USART2->BRR = 0x0683;
 8000280:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <uart+0x64>)
 8000282:	f240 6283 	movw	r2, #1667	; 0x683
 8000286:	609a      	str	r2, [r3, #8]

    //Enable the  Transmitter by set TE bit in USART_CR1 register.
    USART2->CR1 |= USART_CR1_TE;
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <uart+0x64>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a11      	ldr	r2, [pc, #68]	; (80002d4 <uart+0x64>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	60d3      	str	r3, [r2, #12]

    //Enable the USART by set UE bit in USART_CR1 register.
    USART2->CR1 |= USART_CR1_UE;
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <uart+0x64>)
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	4a0e      	ldr	r2, [pc, #56]	; (80002d4 <uart+0x64>)
 800029a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800029e:	60d3      	str	r3, [r2, #12]

    // Define the word length by M bit in USART_CR1
    //M=0 : 1 Start bit, 8 Data bits, n Stop bit
    USART2->CR1 &= ~USART_CR1_M;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <uart+0x64>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <uart+0x64>)
 80002a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002aa:	60d3      	str	r3, [r2, #12]

    //Define number of stop bits in USART_CR2
    //Bits 13:12 STOP: STOP bits
    //00: 1 Stop bit
    USART2->CR2 &= ~USART_CR2_STOP_0;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <uart+0x64>)
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	4a08      	ldr	r2, [pc, #32]	; (80002d4 <uart+0x64>)
 80002b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002b6:	6113      	str	r3, [r2, #16]
    USART2->CR2 &= ~USART_CR2_STOP_1;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <uart+0x64>)
 80002ba:	691b      	ldr	r3, [r3, #16]
 80002bc:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <uart+0x64>)
 80002be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002c2:	6113      	str	r3, [r2, #16]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40004400 	.word	0x40004400

080002d8 <data_write>:

// Function to transmit a single character over UART
void data_write(char data)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	// Wait until transmit data register is empty
    while(!(USART2->SR & USART_SR_TXE)){}
 80002e2:	bf00      	nop
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <data_write+0x2c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0f9      	beq.n	80002e4 <data_write+0xc>
    {
    	// Transmit data
        USART2->DR = data;
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <data_write+0x2c>)
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	6053      	str	r3, [r2, #4]
    }
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40004400 	.word	0x40004400

08000308 <string_write>:

// Function to transmit a string over UART
void string_write(char *ptr)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
    while(*ptr != '\0')
 8000310:	e00c      	b.n	800032c <string_write+0x24>
    {
    	// Wait until transmit data register is empty
        while(!(USART2->SR & USART_SR_TXE)){}
 8000312:	bf00      	nop
 8000314:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <string_write+0x3c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0f9      	beq.n	8000314 <string_write+0xc>
        {
        	// Transmit character by character
            USART2->DR = *ptr++;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	607a      	str	r2, [r7, #4]
 8000326:	781a      	ldrb	r2, [r3, #0]
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <string_write+0x3c>)
 800032a:	605a      	str	r2, [r3, #4]
    while(*ptr != '\0')
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1ee      	bne.n	8000312 <string_write+0xa>
        }
    }
}
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40004400 	.word	0x40004400

08000348 <delay>:
// Function to provide delay
void delay(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
    int i = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
    for (i = 0; i < 500000; i++);
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	e002      	b.n	800035e <delay+0x16>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3301      	adds	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <delay+0x2c>)
 8000362:	4293      	cmp	r3, r2
 8000364:	ddf8      	ble.n	8000358 <delay+0x10>
}
 8000366:	bf00      	nop
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	0007a11f 	.word	0x0007a11f

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	; (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ff1d 	bl	80001e8 <main>

080003ae <LoopForever>:

LoopForever:
  b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003bc:	08000448 	.word	0x08000448
  ldr r2, =_sbss
 80003c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c4:	2000001c 	.word	0x2000001c

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	; (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	; (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	; (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	; (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	08000440 	.word	0x08000440
 8000408:	08000440 	.word	0x08000440
 800040c:	08000440 	.word	0x08000440
 8000410:	08000444 	.word	0x08000444

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
