
delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001fc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a4  080003ac  000103ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a4  080003a4  000103ac  2**0
                  CONTENTS
  4 .ARM          00000000  080003a4  080003a4  000103ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a4  080003ac  000103ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a8  080003a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103ac  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004d1  00000000  00000000  000103dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000ec  00000000  00000000  000108ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  000109a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180bf  00000000  00000000  00010a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000558  00000000  00000000  00028b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087bad  00000000  00000000  0002905f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b0c0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000b8  00000000  00000000  000b0c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800038c 	.word	0x0800038c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800038c 	.word	0x0800038c

080001e8 <main>:
void timer_config();
void gpio_config();
int count =0, count1=0;

int main()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
   clk_config();
 80001ec:	f000 f83e 	bl	800026c <clk_config>
   gpio_config();
 80001f0:	f000 f852 	bl	8000298 <gpio_config>
   timer_config();
 80001f4:	f000 f866 	bl	80002c4 <timer_config>

   while(1)
   {
      //wait until UIF bit of the TIM7 status register is set
	   while(!(TIM7->SR & 1)){}
 80001f8:	bf00      	nop
 80001fa:	4b18      	ldr	r3, [pc, #96]	; (800025c <main+0x74>)
 80001fc:	691b      	ldr	r3, [r3, #16]
 80001fe:	f003 0301 	and.w	r3, r3, #1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <main+0x12>
	   {
		   //clear UIF bit
		   TIM7->SR &= 0;
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <main+0x74>)
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	4b14      	ldr	r3, [pc, #80]	; (800025c <main+0x74>)
 800020c:	2200      	movs	r2, #0
 800020e:	611a      	str	r2, [r3, #16]

		   count++;
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <main+0x78>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	3301      	adds	r3, #1
 8000216:	4a12      	ldr	r2, [pc, #72]	; (8000260 <main+0x78>)
 8000218:	6013      	str	r3, [r2, #0]
		   count1++;
 800021a:	4b12      	ldr	r3, [pc, #72]	; (8000264 <main+0x7c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	3301      	adds	r3, #1
 8000220:	4a10      	ldr	r2, [pc, #64]	; (8000264 <main+0x7c>)
 8000222:	6013      	str	r3, [r2, #0]
		   if(count == 100)
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <main+0x78>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2b64      	cmp	r3, #100	; 0x64
 800022a:	d108      	bne.n	800023e <main+0x56>
		   {
			   // Toggle GPIOD Pin 12 (LED) for every 100ms
			   GPIOD->ODR ^= GPIO_ODR_OD12;
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <main+0x80>)
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <main+0x80>)
 8000232:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000236:	6153      	str	r3, [r2, #20]

			   count=0;
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <main+0x78>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
		   }
		   if(count1 == 500)
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <main+0x7c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000246:	d1d7      	bne.n	80001f8 <main+0x10>
		   {
			   // Toggle GPIOD Pin 12 (LED) for every 500ms
			  	GPIOD->ODR ^= GPIO_ODR_OD13;
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <main+0x80>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a06      	ldr	r2, [pc, #24]	; (8000268 <main+0x80>)
 800024e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000252:	6153      	str	r3, [r2, #20]

			  	count1=0;
 8000254:	4b03      	ldr	r3, [pc, #12]	; (8000264 <main+0x7c>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
	   while(!(TIM7->SR & 1)){}
 800025a:	e7cd      	b.n	80001f8 <main+0x10>
 800025c:	40001400 	.word	0x40001400
 8000260:	2000001c 	.word	0x2000001c
 8000264:	20000020 	.word	0x20000020
 8000268:	40020c00 	.word	0x40020c00

0800026c <clk_config>:
	   }
   }
}

void clk_config()
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	// TIM7 clock enabled
	RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <clk_config+0x28>)
 8000272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000274:	4a07      	ldr	r2, [pc, #28]	; (8000294 <clk_config+0x28>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6413      	str	r3, [r2, #64]	; 0x40

	// Enable clock for GPIOD
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <clk_config+0x28>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <clk_config+0x28>)
 8000282:	f043 0308 	orr.w	r3, r3, #8
 8000286:	6313      	str	r3, [r2, #48]	; 0x30

}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40023800 	.word	0x40023800

08000298 <gpio_config>:

void gpio_config()
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	// Set GPIOD Pin 12 as output
    GPIOD->MODER |=  GPIO_MODER_MODE12_0;
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <gpio_config+0x28>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <gpio_config+0x28>)
 80002a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002a6:	6013      	str	r3, [r2, #0]

    GPIOD->MODER |=  GPIO_MODER_MODE13_0;
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <gpio_config+0x28>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <gpio_config+0x28>)
 80002ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002b2:	6013      	str	r3, [r2, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40020c00 	.word	0x40020c00

080002c4 <timer_config>:

void timer_config()
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0

	//Counter value
	TIM7->CNT = 0;
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <timer_config+0x28>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	625a      	str	r2, [r3, #36]	; 0x24

	// Auto-reload value
	TIM7->ARR = 16000-1;
 80002ce:	4b07      	ldr	r3, [pc, #28]	; (80002ec <timer_config+0x28>)
 80002d0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002d4:	62da      	str	r2, [r3, #44]	; 0x2c

	//Counter enabled
	TIM7->CR1 |= TIM_CR1_CEN;
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <timer_config+0x28>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a04      	ldr	r2, [pc, #16]	; (80002ec <timer_config+0x28>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6013      	str	r3, [r2, #0]
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	40001400 	.word	0x40001400

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	; (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	; (800033c <LoopForever+0x16>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 f811 	bl	8000344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ff61 	bl	80001e8 <main>

08000326 <LoopForever>:

LoopForever:
  b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000334:	080003ac 	.word	0x080003ac
  ldr r2, =_sbss
 8000338:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800033c:	20000024 	.word	0x20000024

08000340 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC_IRQHandler>
	...

08000344 <__libc_init_array>:
 8000344:	b570      	push	{r4, r5, r6, lr}
 8000346:	4d0d      	ldr	r5, [pc, #52]	; (800037c <__libc_init_array+0x38>)
 8000348:	4c0d      	ldr	r4, [pc, #52]	; (8000380 <__libc_init_array+0x3c>)
 800034a:	1b64      	subs	r4, r4, r5
 800034c:	10a4      	asrs	r4, r4, #2
 800034e:	2600      	movs	r6, #0
 8000350:	42a6      	cmp	r6, r4
 8000352:	d109      	bne.n	8000368 <__libc_init_array+0x24>
 8000354:	4d0b      	ldr	r5, [pc, #44]	; (8000384 <__libc_init_array+0x40>)
 8000356:	4c0c      	ldr	r4, [pc, #48]	; (8000388 <__libc_init_array+0x44>)
 8000358:	f000 f818 	bl	800038c <_init>
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	10a4      	asrs	r4, r4, #2
 8000360:	2600      	movs	r6, #0
 8000362:	42a6      	cmp	r6, r4
 8000364:	d105      	bne.n	8000372 <__libc_init_array+0x2e>
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f855 3b04 	ldr.w	r3, [r5], #4
 800036c:	4798      	blx	r3
 800036e:	3601      	adds	r6, #1
 8000370:	e7ee      	b.n	8000350 <__libc_init_array+0xc>
 8000372:	f855 3b04 	ldr.w	r3, [r5], #4
 8000376:	4798      	blx	r3
 8000378:	3601      	adds	r6, #1
 800037a:	e7f2      	b.n	8000362 <__libc_init_array+0x1e>
 800037c:	080003a4 	.word	0x080003a4
 8000380:	080003a4 	.word	0x080003a4
 8000384:	080003a4 	.word	0x080003a4
 8000388:	080003a8 	.word	0x080003a8

0800038c <_init>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr

08000398 <_fini>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr
