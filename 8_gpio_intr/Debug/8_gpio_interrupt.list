
8_gpio_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003fc  08000404  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003fc  080003fc  00010404  2**0
                  CONTENTS
  4 .ARM          00000000  080003fc  080003fc  00010404  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003fc  08000404  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010404  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010404  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000085a  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001b9  00000000  00000000  00010c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000058  00000000  00000000  00010eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180bf  00000000  00000000  00010f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000059d  00000000  00000000  00028fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000880ef  00000000  00000000  0002956c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b165b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000fc  00000000  00000000  000b16ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003e4 	.word	0x080003e4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003e4 	.word	0x080003e4

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4907      	ldr	r1, [pc, #28]	; (8000220 <__NVIC_EnableIRQ+0x38>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100

08000224 <main>:
void intr();
void clk_config();
void mode_config();

int main()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
   clk_config();
 8000228:	f000 f808 	bl	800023c <clk_config>
   intr();
 800022c:	f000 f822 	bl	8000274 <intr>
   mode_config();
 8000230:	f000 f854 	bl	80002dc <mode_config>
 8000234:	2300      	movs	r3, #0
}
 8000236:	4618      	mov	r0, r3
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <clk_config>:

void clk_config()
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	// Enable clock for GPIOA
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <clk_config+0x34>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <clk_config+0x34>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6313      	str	r3, [r2, #48]	; 0x30

	// Enable clock for GPIOD
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <clk_config+0x34>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a07      	ldr	r2, [pc, #28]	; (8000270 <clk_config+0x34>)
 8000252:	f043 0308 	orr.w	r3, r3, #8
 8000256:	6313      	str	r3, [r2, #48]	; 0x30

	// System configuration controller clock enabled
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <clk_config+0x34>)
 800025a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <clk_config+0x34>)
 800025e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000262:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40023800 	.word	0x40023800

08000274 <intr>:

void intr()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000278:	b672      	cpsid	i
}
 800027a:	bf00      	nop
	// Disable interrupts globally
	__disable_irq();

	// Select PA0 for EXTI0
	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0 ;
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <intr+0x60>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	4a14      	ldr	r2, [pc, #80]	; (80002d4 <intr+0x60>)
 8000282:	f023 030f 	bic.w	r3, r3, #15
 8000286:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI1 ;
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <intr+0x60>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a11      	ldr	r2, [pc, #68]	; (80002d4 <intr+0x60>)
 800028e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000292:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI2 ;
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <intr+0x60>)
 8000296:	691b      	ldr	r3, [r3, #16]
 8000298:	4a0e      	ldr	r2, [pc, #56]	; (80002d4 <intr+0x60>)
 800029a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800029e:	6113      	str	r3, [r2, #16]
	SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI3 ;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <intr+0x60>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <intr+0x60>)
 80002a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002aa:	6153      	str	r3, [r2, #20]

	//Falling trigger enabled (for Event and Interrupt) for input line.
     EXTI->FTSR |= EXTI_FTSR_TR0;
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <intr+0x64>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <intr+0x64>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	60d3      	str	r3, [r2, #12]
	 //EXTI->RTSR |= EXTI_RTSR_TR0;

     //Interrupt request from EXTI0 is not masked
     EXTI->IMR |= EXTI_IMR_MR0;
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <intr+0x64>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <intr+0x64>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6013      	str	r3, [r2, #0]

     //Enable EXTI0 line in NVIC
      NVIC_EnableIRQ(EXTI0_IRQn);
 80002c4:	2006      	movs	r0, #6
 80002c6:	f7ff ff8f 	bl	80001e8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002ca:	b662      	cpsie	i
}
 80002cc:	bf00      	nop

      //Enable interrupts globally
     __enable_irq();
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40013800 	.word	0x40013800
 80002d8:	40013c00 	.word	0x40013c00

080002dc <mode_config>:

void mode_config()
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	// Clear mode bits for GPIOA Pin 0 as input
	GPIOA->MODER &= ~GPIO_MODER_MODE0_0;
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <mode_config+0x34>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <mode_config+0x34>)
 80002e6:	f023 0301 	bic.w	r3, r3, #1
 80002ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE0_1;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <mode_config+0x34>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a07      	ldr	r2, [pc, #28]	; (8000310 <mode_config+0x34>)
 80002f2:	f023 0302 	bic.w	r3, r3, #2
 80002f6:	6013      	str	r3, [r2, #0]

	// Set GPIOD Pin 12 as output
	GPIOD->MODER |=  GPIO_MODER_MODE12_0;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <mode_config+0x38>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a05      	ldr	r2, [pc, #20]	; (8000314 <mode_config+0x38>)
 80002fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000302:	6013      	str	r3, [r2, #0]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40020000 	.word	0x40020000
 8000314:	40020c00 	.word	0x40020c00

08000318 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	// Toggle GPIO pin 12 of GPIOD
	 GPIOD->ODR ^= GPIO_ODR_OD12;
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <EXTI0_IRQHandler+0x28>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a07      	ldr	r2, [pc, #28]	; (8000340 <EXTI0_IRQHandler+0x28>)
 8000322:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000326:	6153      	str	r3, [r2, #20]

	 //selected trigger request occurred
	 //This bit is set when the selected edge event arrives on the external interrupt line.
	 //This bit is cleared by programming it to ‘1’.
	 EXTI->PR |= EXTI_PR_PR0;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <EXTI0_IRQHandler+0x2c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a05      	ldr	r2, [pc, #20]	; (8000344 <EXTI0_IRQHandler+0x2c>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	6153      	str	r3, [r2, #20]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40020c00 	.word	0x40020c00
 8000344:	40013c00 	.word	0x40013c00

08000348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000348:	480d      	ldr	r0, [pc, #52]	; (8000380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800034c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <LoopForever+0x6>)
  ldr r1, =_edata
 8000352:	490d      	ldr	r1, [pc, #52]	; (8000388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <LoopForever+0xe>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000368:	4c0a      	ldr	r4, [pc, #40]	; (8000394 <LoopForever+0x16>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000376:	f000 f811 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ff53 	bl	8000224 <main>

0800037e <LoopForever>:

LoopForever:
  b LoopForever
 800037e:	e7fe      	b.n	800037e <LoopForever>
  ldr   r0, =_estack
 8000380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800038c:	08000404 	.word	0x08000404
  ldr r2, =_sbss
 8000390:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000394:	2000001c 	.word	0x2000001c

08000398 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4d0d      	ldr	r5, [pc, #52]	; (80003d4 <__libc_init_array+0x38>)
 80003a0:	4c0d      	ldr	r4, [pc, #52]	; (80003d8 <__libc_init_array+0x3c>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	2600      	movs	r6, #0
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	4d0b      	ldr	r5, [pc, #44]	; (80003dc <__libc_init_array+0x40>)
 80003ae:	4c0c      	ldr	r4, [pc, #48]	; (80003e0 <__libc_init_array+0x44>)
 80003b0:	f000 f818 	bl	80003e4 <_init>
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	2600      	movs	r6, #0
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
 80003d4:	080003fc 	.word	0x080003fc
 80003d8:	080003fc 	.word	0x080003fc
 80003dc:	080003fc 	.word	0x080003fc
 80003e0:	08000400 	.word	0x08000400

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr
