
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000028c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000434  0800043c  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  4 .ARM          00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000434  0800043c  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001043c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004fd  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000106  00000000  00000000  00010969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180bf  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005df  00000000  00000000  00028be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087bd0  00000000  00000000  000291c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b0d96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e8  00000000  00000000  000b0de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800041c 	.word	0x0800041c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800041c 	.word	0x0800041c

080001e8 <main>:
void gpio_config();
void TIM6_delay_us(uint16_t);
void TIM6_delay_ms(uint16_t);

int main()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	clk_config();
 80001ec:	f000 f826 	bl	800023c <clk_config>
	gpio_config();
 80001f0:	f000 f83a 	bl	8000268 <gpio_config>


	 while (1)
	    {
	        // Generate 16us delay
	        GPIOA->ODR |= GPIO_ODR_OD5; // Set PA5 high
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <main+0x50>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a0f      	ldr	r2, [pc, #60]	; (8000238 <main+0x50>)
 80001fa:	f043 0320 	orr.w	r3, r3, #32
 80001fe:	6153      	str	r3, [r2, #20]
	        TIM6_delay_us(16);
 8000200:	2010      	movs	r0, #16
 8000202:	f000 f847 	bl	8000294 <TIM6_delay_us>

	        GPIOA->ODR &= ~GPIO_ODR_OD5; // Set PA5 low
 8000206:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <main+0x50>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4a0b      	ldr	r2, [pc, #44]	; (8000238 <main+0x50>)
 800020c:	f023 0320 	bic.w	r3, r3, #32
 8000210:	6153      	str	r3, [r2, #20]

	        // Generate 20ms delay
	        TIM6_delay_ms(20);
 8000212:	2014      	movs	r0, #20
 8000214:	f000 f878 	bl	8000308 <TIM6_delay_ms>

	        // Generate 80us delay
	        GPIOA->ODR |= GPIO_ODR_OD5; // Set PA5 high
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <main+0x50>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <main+0x50>)
 800021e:	f043 0320 	orr.w	r3, r3, #32
 8000222:	6153      	str	r3, [r2, #20]
	        TIM6_delay_us(80);
 8000224:	2050      	movs	r0, #80	; 0x50
 8000226:	f000 f835 	bl	8000294 <TIM6_delay_us>
	        GPIOA->ODR &= ~GPIO_ODR_OD5; // Set PA5 low
 800022a:	4b03      	ldr	r3, [pc, #12]	; (8000238 <main+0x50>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a02      	ldr	r2, [pc, #8]	; (8000238 <main+0x50>)
 8000230:	f023 0320 	bic.w	r3, r3, #32
 8000234:	6153      	str	r3, [r2, #20]
	        GPIOA->ODR |= GPIO_ODR_OD5; // Set PA5 high
 8000236:	e7dd      	b.n	80001f4 <main+0xc>
 8000238:	40020000 	.word	0x40020000

0800023c <clk_config>:
	    }

}

void clk_config()
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	// Enable clock for GPIOA
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <clk_config+0x28>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <clk_config+0x28>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6313      	str	r3, [r2, #48]	; 0x30

	// TIM7 clock enabled
	RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <clk_config+0x28>)
 800024e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <clk_config+0x28>)
 8000252:	f043 0320 	orr.w	r3, r3, #32
 8000256:	6413      	str	r3, [r2, #64]	; 0x40

}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800

08000268 <gpio_config>:

void gpio_config()
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	// set mode bits for GPIOA as output
	GPIOA->MODER |= GPIO_MODER_MODE0_0;
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <gpio_config+0x28>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a07      	ldr	r2, [pc, #28]	; (8000290 <gpio_config+0x28>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE0_1;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <gpio_config+0x28>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a04      	ldr	r2, [pc, #16]	; (8000290 <gpio_config+0x28>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40020000 	.word	0x40020000

08000294 <TIM6_delay_us>:

void TIM6_delay_us(uint16_t us)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	80fb      	strh	r3, [r7, #6]
    // Enable TIM6 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 800029e:	4b18      	ldr	r3, [pc, #96]	; (8000300 <TIM6_delay_us+0x6c>)
 80002a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a2:	4a17      	ldr	r2, [pc, #92]	; (8000300 <TIM6_delay_us+0x6c>)
 80002a4:	f043 0310 	orr.w	r3, r3, #16
 80002a8:	6413      	str	r3, [r2, #64]	; 0x40

    // Reset TIM6
    RCC->APB1RSTR |= RCC_APB1RSTR_TIM6RST;
 80002aa:	4b15      	ldr	r3, [pc, #84]	; (8000300 <TIM6_delay_us+0x6c>)
 80002ac:	6a1b      	ldr	r3, [r3, #32]
 80002ae:	4a14      	ldr	r2, [pc, #80]	; (8000300 <TIM6_delay_us+0x6c>)
 80002b0:	f043 0310 	orr.w	r3, r3, #16
 80002b4:	6213      	str	r3, [r2, #32]
    RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM6RST;
 80002b6:	4b12      	ldr	r3, [pc, #72]	; (8000300 <TIM6_delay_us+0x6c>)
 80002b8:	6a1b      	ldr	r3, [r3, #32]
 80002ba:	4a11      	ldr	r2, [pc, #68]	; (8000300 <TIM6_delay_us+0x6c>)
 80002bc:	f023 0310 	bic.w	r3, r3, #16
 80002c0:	6213      	str	r3, [r2, #32]

    // Set the prescaler value
    TIM6->PSC = 16000000 / 1000000 - 1; // Prescaler for 1us
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <TIM6_delay_us+0x70>)
 80002c4:	220f      	movs	r2, #15
 80002c6:	629a      	str	r2, [r3, #40]	; 0x28

    // Calculate the ARR value
    TIM6->ARR = us;
 80002c8:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <TIM6_delay_us+0x70>)
 80002ca:	88fb      	ldrh	r3, [r7, #6]
 80002cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Enable the counter
    TIM6->CR1 |= TIM_CR1_CEN;
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <TIM6_delay_us+0x70>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <TIM6_delay_us+0x70>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6013      	str	r3, [r2, #0]

    // Wait until the counter reaches the ARR value
    while (!(TIM6->SR & TIM_SR_UIF))
 80002da:	bf00      	nop
 80002dc:	4b09      	ldr	r3, [pc, #36]	; (8000304 <TIM6_delay_us+0x70>)
 80002de:	691b      	ldr	r3, [r3, #16]
 80002e0:	f003 0301 	and.w	r3, r3, #1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0f9      	beq.n	80002dc <TIM6_delay_us+0x48>
        ;

    // Reset the update event flag
    TIM6->SR &= ~TIM_SR_UIF;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <TIM6_delay_us+0x70>)
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <TIM6_delay_us+0x70>)
 80002ee:	f023 0301 	bic.w	r3, r3, #1
 80002f2:	6113      	str	r3, [r2, #16]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	40023800 	.word	0x40023800
 8000304:	40001000 	.word	0x40001000

08000308 <TIM6_delay_ms>:

void TIM6_delay_ms(uint16_t ms)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	80fb      	strh	r3, [r7, #6]
    // Enable TIM6 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <TIM6_delay_ms+0x70>)
 8000314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000316:	4a18      	ldr	r2, [pc, #96]	; (8000378 <TIM6_delay_ms+0x70>)
 8000318:	f043 0310 	orr.w	r3, r3, #16
 800031c:	6413      	str	r3, [r2, #64]	; 0x40

    // Reset TIM6
    RCC->APB1RSTR |= RCC_APB1RSTR_TIM6RST;
 800031e:	4b16      	ldr	r3, [pc, #88]	; (8000378 <TIM6_delay_ms+0x70>)
 8000320:	6a1b      	ldr	r3, [r3, #32]
 8000322:	4a15      	ldr	r2, [pc, #84]	; (8000378 <TIM6_delay_ms+0x70>)
 8000324:	f043 0310 	orr.w	r3, r3, #16
 8000328:	6213      	str	r3, [r2, #32]
    RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM6RST;
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <TIM6_delay_ms+0x70>)
 800032c:	6a1b      	ldr	r3, [r3, #32]
 800032e:	4a12      	ldr	r2, [pc, #72]	; (8000378 <TIM6_delay_ms+0x70>)
 8000330:	f023 0310 	bic.w	r3, r3, #16
 8000334:	6213      	str	r3, [r2, #32]

    // Set the prescaler value
    TIM6->PSC = 16000000 / 1000 - 1; // Prescaler for 1ms
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <TIM6_delay_ms+0x74>)
 8000338:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800033c:	629a      	str	r2, [r3, #40]	; 0x28

    // Calculate the ARR value
    TIM6->ARR = ms;
 800033e:	4a0f      	ldr	r2, [pc, #60]	; (800037c <TIM6_delay_ms+0x74>)
 8000340:	88fb      	ldrh	r3, [r7, #6]
 8000342:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Enable the counter
    TIM6->CR1 |= TIM_CR1_CEN;
 8000344:	4b0d      	ldr	r3, [pc, #52]	; (800037c <TIM6_delay_ms+0x74>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a0c      	ldr	r2, [pc, #48]	; (800037c <TIM6_delay_ms+0x74>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6013      	str	r3, [r2, #0]

    // Wait until the counter reaches the ARR value
    while (!(TIM6->SR & TIM_SR_UIF))
 8000350:	bf00      	nop
 8000352:	4b0a      	ldr	r3, [pc, #40]	; (800037c <TIM6_delay_ms+0x74>)
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f9      	beq.n	8000352 <TIM6_delay_ms+0x4a>
        ;

    // Reset the update event flag
    TIM6->SR &= ~TIM_SR_UIF;
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <TIM6_delay_ms+0x74>)
 8000360:	691b      	ldr	r3, [r3, #16]
 8000362:	4a06      	ldr	r2, [pc, #24]	; (800037c <TIM6_delay_ms+0x74>)
 8000364:	f023 0301 	bic.w	r3, r3, #1
 8000368:	6113      	str	r3, [r2, #16]
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40023800 	.word	0x40023800
 800037c:	40001000 	.word	0x40001000

08000380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000380:	480d      	ldr	r0, [pc, #52]	; (80003b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000382:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000384:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <LoopForever+0x6>)
  ldr r1, =_edata
 800038a:	490d      	ldr	r1, [pc, #52]	; (80003c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <LoopForever+0xe>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a0:	4c0a      	ldr	r4, [pc, #40]	; (80003cc <LoopForever+0x16>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ae:	f000 f811 	bl	80003d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b2:	f7ff ff19 	bl	80001e8 <main>

080003b6 <LoopForever>:

LoopForever:
  b LoopForever
 80003b6:	e7fe      	b.n	80003b6 <LoopForever>
  ldr   r0, =_estack
 80003b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c4:	0800043c 	.word	0x0800043c
  ldr r2, =_sbss
 80003c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003cc:	2000001c 	.word	0x2000001c

080003d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC_IRQHandler>
	...

080003d4 <__libc_init_array>:
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	4d0d      	ldr	r5, [pc, #52]	; (800040c <__libc_init_array+0x38>)
 80003d8:	4c0d      	ldr	r4, [pc, #52]	; (8000410 <__libc_init_array+0x3c>)
 80003da:	1b64      	subs	r4, r4, r5
 80003dc:	10a4      	asrs	r4, r4, #2
 80003de:	2600      	movs	r6, #0
 80003e0:	42a6      	cmp	r6, r4
 80003e2:	d109      	bne.n	80003f8 <__libc_init_array+0x24>
 80003e4:	4d0b      	ldr	r5, [pc, #44]	; (8000414 <__libc_init_array+0x40>)
 80003e6:	4c0c      	ldr	r4, [pc, #48]	; (8000418 <__libc_init_array+0x44>)
 80003e8:	f000 f818 	bl	800041c <_init>
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	10a4      	asrs	r4, r4, #2
 80003f0:	2600      	movs	r6, #0
 80003f2:	42a6      	cmp	r6, r4
 80003f4:	d105      	bne.n	8000402 <__libc_init_array+0x2e>
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fc:	4798      	blx	r3
 80003fe:	3601      	adds	r6, #1
 8000400:	e7ee      	b.n	80003e0 <__libc_init_array+0xc>
 8000402:	f855 3b04 	ldr.w	r3, [r5], #4
 8000406:	4798      	blx	r3
 8000408:	3601      	adds	r6, #1
 800040a:	e7f2      	b.n	80003f2 <__libc_init_array+0x1e>
 800040c:	08000434 	.word	0x08000434
 8000410:	08000434 	.word	0x08000434
 8000414:	08000434 	.word	0x08000434
 8000418:	08000438 	.word	0x08000438

0800041c <_init>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr

08000428 <_fini>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr
