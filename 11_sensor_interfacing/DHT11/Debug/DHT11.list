
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800039c  080003a4  000103a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800039c  0800039c  000103a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800039c  0800039c  000103a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800039c  080003a4  000103a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800039c  0800039c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a0  080003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103a4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003b9  00000000  00000000  000103d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000012a  00000000  00000000  0001078d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  000108b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180bf  00000000  00000000  00010970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000058a  00000000  00000000  00028a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087b7c  00000000  00000000  00028fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b0b35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e0  00000000  00000000  000b0b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000384 	.word	0x08000384

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000384 	.word	0x08000384

080001e8 <main>:
void delay(int);
//void rc_data();
int data;

int main()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	clk_config();
 80001ec:	f000 f840 	bl	8000270 <clk_config>
	gpio_config();
 80001f0:	f000 f84e 	bl	8000290 <gpio_config>
	// Set PA1 high
	GPIOA->ODR |= GPIO_ODR_OD1;
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <main+0x58>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <main+0x58>)
 80001fa:	f043 0302 	orr.w	r3, r3, #2
 80001fe:	6153      	str	r3, [r2, #20]

	while(1)
	{
		// Set PA1 low
		GPIOA->ODR &= ~GPIO_ODR_OD1;
 8000200:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <main+0x58>)
 8000202:	695b      	ldr	r3, [r3, #20]
 8000204:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <main+0x58>)
 8000206:	f023 0302 	bic.w	r3, r3, #2
 800020a:	6153      	str	r3, [r2, #20]
		delay(18000);
 800020c:	f244 6050 	movw	r0, #18000	; 0x4650
 8000210:	f000 f818 	bl	8000244 <delay>

		// Set PA1 high
		GPIOA->ODR |= GPIO_ODR_OD1;
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <main+0x58>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a09      	ldr	r2, [pc, #36]	; (8000240 <main+0x58>)
 800021a:	f043 0302 	orr.w	r3, r3, #2
 800021e:	6153      	str	r3, [r2, #20]
		delay(40);
 8000220:	2028      	movs	r0, #40	; 0x28
 8000222:	f000 f80f 	bl	8000244 <delay>

		dht_response();
 8000226:	f000 f849 	bl	80002bc <dht_response>

	    if(GPIOA->IDR & 0x00){}
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <main+0x58>)
 800022c:	691b      	ldr	r3, [r3, #16]
	    delay(54);
 800022e:	2036      	movs	r0, #54	; 0x36
 8000230:	f000 f808 	bl	8000244 <delay>

	    if(GPIOA->IDR & 0x10){}
 8000234:	4b02      	ldr	r3, [pc, #8]	; (8000240 <main+0x58>)
 8000236:	691b      	ldr	r3, [r3, #16]
	    delay(80);
 8000238:	2050      	movs	r0, #80	; 0x50
 800023a:	f000 f803 	bl	8000244 <delay>
		GPIOA->ODR &= ~GPIO_ODR_OD1;
 800023e:	e7df      	b.n	8000200 <main+0x18>
 8000240:	40020000 	.word	0x40020000

08000244 <delay>:
	    //rc_data();
    }
}

void delay(int d)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	volatile int i;
	for(i=0; i<d; i++){}
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	e002      	b.n	8000258 <delay+0x14>
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	3301      	adds	r3, #1
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	429a      	cmp	r2, r3
 800025e:	dcf8      	bgt.n	8000252 <delay+0xe>
}
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
	...

08000270 <clk_config>:

}
*/

void clk_config()
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	// Enable clock for GPIOA
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <clk_config+0x1c>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <clk_config+0x1c>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40023800 	.word	0x40023800

08000290 <gpio_config>:

void gpio_config()
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	// set mode bits for GPIOA as output
	GPIOA->MODER |= GPIO_MODER_MODE1_0;
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <gpio_config+0x28>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <gpio_config+0x28>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE1_1;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <gpio_config+0x28>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <gpio_config+0x28>)
 80002a6:	f023 0308 	bic.w	r3, r3, #8
 80002aa:	6013      	str	r3, [r2, #0]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40020000 	.word	0x40020000

080002bc <dht_response>:

void dht_response()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	//Set PA1 pin as input
	GPIOA->MODER &= ~GPIO_MODER_MODE1_0;
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <dht_response+0x28>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <dht_response+0x28>)
 80002c6:	f023 0304 	bic.w	r3, r3, #4
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE1_1;
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <dht_response+0x28>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <dht_response+0x28>)
 80002d2:	f023 0308 	bic.w	r3, r3, #8
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40020000 	.word	0x40020000

080002e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e8:	480d      	ldr	r0, [pc, #52]	; (8000320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	; (8000324 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	; (8000328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <LoopForever+0xe>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	; (8000334 <LoopForever+0x16>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000316:	f000 f811 	bl	800033c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031a:	f7ff ff65 	bl	80001e8 <main>

0800031e <LoopForever>:

LoopForever:
  b LoopForever
 800031e:	e7fe      	b.n	800031e <LoopForever>
  ldr   r0, =_estack
 8000320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800032c:	080003a4 	.word	0x080003a4
  ldr r2, =_sbss
 8000330:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000334:	2000001c 	.word	0x2000001c

08000338 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC_IRQHandler>
	...

0800033c <__libc_init_array>:
 800033c:	b570      	push	{r4, r5, r6, lr}
 800033e:	4d0d      	ldr	r5, [pc, #52]	; (8000374 <__libc_init_array+0x38>)
 8000340:	4c0d      	ldr	r4, [pc, #52]	; (8000378 <__libc_init_array+0x3c>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	2600      	movs	r6, #0
 8000348:	42a6      	cmp	r6, r4
 800034a:	d109      	bne.n	8000360 <__libc_init_array+0x24>
 800034c:	4d0b      	ldr	r5, [pc, #44]	; (800037c <__libc_init_array+0x40>)
 800034e:	4c0c      	ldr	r4, [pc, #48]	; (8000380 <__libc_init_array+0x44>)
 8000350:	f000 f818 	bl	8000384 <_init>
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	10a4      	asrs	r4, r4, #2
 8000358:	2600      	movs	r6, #0
 800035a:	42a6      	cmp	r6, r4
 800035c:	d105      	bne.n	800036a <__libc_init_array+0x2e>
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f855 3b04 	ldr.w	r3, [r5], #4
 8000364:	4798      	blx	r3
 8000366:	3601      	adds	r6, #1
 8000368:	e7ee      	b.n	8000348 <__libc_init_array+0xc>
 800036a:	f855 3b04 	ldr.w	r3, [r5], #4
 800036e:	4798      	blx	r3
 8000370:	3601      	adds	r6, #1
 8000372:	e7f2      	b.n	800035a <__libc_init_array+0x1e>
 8000374:	0800039c 	.word	0x0800039c
 8000378:	0800039c 	.word	0x0800039c
 800037c:	0800039c 	.word	0x0800039c
 8000380:	080003a0 	.word	0x080003a0

08000384 <_init>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr

08000390 <_fini>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr
