
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000025c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001040c  2**0
                  CONTENTS
 10 .bss          00000030  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003e3  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000ff  00000000  00000000  0001081f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180bf  00000000  00000000  000109c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005e2  00000000  00000000  00028a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087b76  00000000  00000000  00029069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b0bdf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000b8  00000000  00000000  000b0c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003ec 	.word	0x080003ec

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003ec 	.word	0x080003ec

080001e8 <main>:
void gpio_config();
void dht_response();
int i,j,k,l,m,n;
int data;
int main()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	clk_config();
 80001ec:	f000 f874 	bl	80002d8 <clk_config>
	gpio_config();
 80001f0:	f000 f882 	bl	80002f8 <gpio_config>
	// Set PA1 high
	GPIOA->ODR |= GPIO_ODR_OD1;
 80001f4:	4b32      	ldr	r3, [pc, #200]	; (80002c0 <main+0xd8>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a31      	ldr	r2, [pc, #196]	; (80002c0 <main+0xd8>)
 80001fa:	f043 0302 	orr.w	r3, r3, #2
 80001fe:	6153      	str	r3, [r2, #20]
	for(i=0; i<18000; i++)
 8000200:	4b30      	ldr	r3, [pc, #192]	; (80002c4 <main+0xdc>)
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	e00a      	b.n	800021e <main+0x36>
	{
		// Set PA1 low
	    GPIOA->ODR &= ~GPIO_ODR_OD1;
 8000208:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <main+0xd8>)
 800020a:	695b      	ldr	r3, [r3, #20]
 800020c:	4a2c      	ldr	r2, [pc, #176]	; (80002c0 <main+0xd8>)
 800020e:	f023 0302 	bic.w	r3, r3, #2
 8000212:	6153      	str	r3, [r2, #20]
	for(i=0; i<18000; i++)
 8000214:	4b2b      	ldr	r3, [pc, #172]	; (80002c4 <main+0xdc>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	4a2a      	ldr	r2, [pc, #168]	; (80002c4 <main+0xdc>)
 800021c:	6013      	str	r3, [r2, #0]
 800021e:	4b29      	ldr	r3, [pc, #164]	; (80002c4 <main+0xdc>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f244 624f 	movw	r2, #17999	; 0x464f
 8000226:	4293      	cmp	r3, r2
 8000228:	ddee      	ble.n	8000208 <main+0x20>
	}
	for(j=0; j<40; j++)
 800022a:	4b27      	ldr	r3, [pc, #156]	; (80002c8 <main+0xe0>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	e00a      	b.n	8000248 <main+0x60>
	{
		// Set PA1 high
		GPIOA->ODR |= GPIO_ODR_OD1;
 8000232:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <main+0xd8>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a22      	ldr	r2, [pc, #136]	; (80002c0 <main+0xd8>)
 8000238:	f043 0302 	orr.w	r3, r3, #2
 800023c:	6153      	str	r3, [r2, #20]
	for(j=0; j<40; j++)
 800023e:	4b22      	ldr	r3, [pc, #136]	; (80002c8 <main+0xe0>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	4a20      	ldr	r2, [pc, #128]	; (80002c8 <main+0xe0>)
 8000246:	6013      	str	r3, [r2, #0]
 8000248:	4b1f      	ldr	r3, [pc, #124]	; (80002c8 <main+0xe0>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2b27      	cmp	r3, #39	; 0x27
 800024e:	ddf0      	ble.n	8000232 <main+0x4a>
	}
	dht_response();
 8000250:	f000 f868 	bl	8000324 <dht_response>
	for(k=0; k<54; k++)
 8000254:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <main+0xe4>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	e00a      	b.n	8000272 <main+0x8a>
	{
		if(GPIOA->IDR & 0x10)
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <main+0xd8>)
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	f003 0310 	and.w	r3, r3, #16
 8000264:	2b00      	cmp	r3, #0
 8000266:	d109      	bne.n	800027c <main+0x94>
	for(k=0; k<54; k++)
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <main+0xe4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	4a17      	ldr	r2, [pc, #92]	; (80002cc <main+0xe4>)
 8000270:	6013      	str	r3, [r2, #0]
 8000272:	4b16      	ldr	r3, [pc, #88]	; (80002cc <main+0xe4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b35      	cmp	r3, #53	; 0x35
 8000278:	ddf0      	ble.n	800025c <main+0x74>
 800027a:	e000      	b.n	800027e <main+0x96>
			break;
 800027c:	bf00      	nop
	}
	for(l=0; l<80; l++)
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <main+0xe8>)
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	e006      	b.n	8000294 <main+0xac>
	{
		if(GPIOA->IDR & 0x00)
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <main+0xd8>)
 8000288:	691b      	ldr	r3, [r3, #16]
	for(l=0; l<80; l++)
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <main+0xe8>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	3301      	adds	r3, #1
 8000290:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <main+0xe8>)
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <main+0xe8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b4f      	cmp	r3, #79	; 0x4f
 800029a:	ddf4      	ble.n	8000286 <main+0x9e>
			break;
	}

	for(m=0; m<54; m++)
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <main+0xec>)
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	e006      	b.n	80002b2 <main+0xca>
	{
		if(GPIOA->IDR & 0x00)
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <main+0xd8>)
 80002a6:	691b      	ldr	r3, [r3, #16]
	for(m=0; m<54; m++)
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <main+0xec>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	4a09      	ldr	r2, [pc, #36]	; (80002d4 <main+0xec>)
 80002b0:	6013      	str	r3, [r2, #0]
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <main+0xec>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b35      	cmp	r3, #53	; 0x35
 80002b8:	ddf4      	ble.n	80002a4 <main+0xbc>
 80002ba:	2300      	movs	r3, #0

			}

		}
	}
}
 80002bc:	4618      	mov	r0, r3
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40020000 	.word	0x40020000
 80002c4:	2000001c 	.word	0x2000001c
 80002c8:	20000020 	.word	0x20000020
 80002cc:	20000024 	.word	0x20000024
 80002d0:	20000028 	.word	0x20000028
 80002d4:	2000002c 	.word	0x2000002c

080002d8 <clk_config>:

void clk_config()
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	// Enable clock for GPIOA
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <clk_config+0x1c>)
 80002de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <clk_config+0x1c>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40023800 	.word	0x40023800

080002f8 <gpio_config>:

void gpio_config()
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	// set mode bits for GPIOA as output
	GPIOA->MODER |= GPIO_MODER_MODE1_0;
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <gpio_config+0x28>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <gpio_config+0x28>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE1_1;
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <gpio_config+0x28>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <gpio_config+0x28>)
 800030e:	f023 0308 	bic.w	r3, r3, #8
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40020000 	.word	0x40020000

08000324 <dht_response>:

void dht_response()
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	//Set PA1 pin as input
	GPIOA->MODER &= ~GPIO_MODER_MODE1_0;
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <dht_response+0x28>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a07      	ldr	r2, [pc, #28]	; (800034c <dht_response+0x28>)
 800032e:	f023 0304 	bic.w	r3, r3, #4
 8000332:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE1_1;
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <dht_response+0x28>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <dht_response+0x28>)
 800033a:	f023 0308 	bic.w	r3, r3, #8
 800033e:	6013      	str	r3, [r2, #0]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40020000 	.word	0x40020000

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000354:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ff31 	bl	80001e8 <main>

08000386 <LoopForever>:

LoopForever:
  b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000394:	0800040c 	.word	0x0800040c
  ldr r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800039c:	20000030 	.word	0x20000030

080003a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	4d0d      	ldr	r5, [pc, #52]	; (80003dc <__libc_init_array+0x38>)
 80003a8:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <__libc_init_array+0x3c>)
 80003aa:	1b64      	subs	r4, r4, r5
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	2600      	movs	r6, #0
 80003b0:	42a6      	cmp	r6, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	4d0b      	ldr	r5, [pc, #44]	; (80003e4 <__libc_init_array+0x40>)
 80003b6:	4c0c      	ldr	r4, [pc, #48]	; (80003e8 <__libc_init_array+0x44>)
 80003b8:	f000 f818 	bl	80003ec <_init>
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	10a4      	asrs	r4, r4, #2
 80003c0:	2600      	movs	r6, #0
 80003c2:	42a6      	cmp	r6, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003cc:	4798      	blx	r3
 80003ce:	3601      	adds	r6, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d6:	4798      	blx	r3
 80003d8:	3601      	adds	r6, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	08000404 	.word	0x08000404
 80003e0:	08000404 	.word	0x08000404
 80003e4:	08000404 	.word	0x08000404
 80003e8:	08000408 	.word	0x08000408

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
